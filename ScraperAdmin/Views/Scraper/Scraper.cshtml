@{
    ViewData["Title"] = "Scraper"; // Setting the title of the page to "Scraper".
}

<!-- Including the CSS file for styling the Scraper page -->
<link href="~/css/ScraperStyles.css" rel="stylesheet" />

<body class="scraper-body">
    <div class="scraper-container text-center"> <!-- Main container for scrapers with center-aligned text -->
        <h2 class="text-white">Scrapers</h2> <!-- Main heading of the page in white color -->

        <!-- Dynamic container for the scrapers -->
        <div class="scraper-row mt-4" id="scraperListDynamic">
            <!-- Dynamic scrapers will be loaded here -->
        </div>

        <!-- Pagination Controls -->
        <nav aria-label="Page navigation example" class="scraper-pagination" id="paginationControls">
            <ul class="pagination">
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span> <!-- Previous button -->
                    </a>
                </li>
                <li class="page-item active"><a class="page-link" href="#">1</a></li> <!-- Active page indicator -->
                <li class="page-item"><a class="page-link" href="#">2</a></li> <!-- Next page link -->
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span> <!-- Next button -->
                    </a>
                </li>
            </ul>
        </nav>
    </div>
</body>

<!-- Including Bootstrap Icons from the CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<script>
    const pageSize = 6; // Maximum number of scrapers per page
    let currentPage = 1; // Keeps track of the current page

    // Function to load dynamic scrapers
    function loadScrapers(page) {
        fetch(`https://localhost:7297/api/ScraperTest?page=${page}&pageSize=${pageSize}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`); // Handle errors in fetching data
                }
                return response.json(); // Parse the JSON response
            })
            .then(data => {
                console.log('Data received:', data); // Logs the received data for verification

                const scraperListDynamic = document.getElementById('scraperListDynamic');
                scraperListDynamic.innerHTML = ''; // Clear the container before adding new scrapers

                // Generate scraper cards dynamically
                data.forEach(scraper => {
                    const card = generateScraperCard(scraper);
                    scraperListDynamic.innerHTML += card; // Append the generated card to the container
                });

                // Update pagination controls if necessary
                // Logic to manage pagination would be added here
            })
            .catch(error => console.error('Error loading scrapers:', error)); // Log any errors encountered
    }

    // Function to generate each scraper's card
    function generateScraperCard(scraper) {
        return `
            <div class="scraper-card shadow-sm">
                <div class="scraper-card-body p-3">
                    <img src="${scraper.imagePath}" alt="${scraper.scraperName} Image" class="img-fluid" />
                </div>
                <div class="scraper-card-footer">
                    <span class="text-white">${scraper.scraperName}</span> <!-- Display the scraper name -->
                    <span class="scraper-status-text text-white">
                        Status:
                        <i class="bi bi-${getStatusIcon(scraper.scraperStatusId)}" style="color: ${getStatusColor(scraper.scraperStatusId)};"></i> <!-- Icon representing the scraper's status -->
                        ${scraper.lastExecutionDate ? new Date(scraper.lastExecutionDate).toLocaleString() : 'Not executed'} <!-- Show last execution date or not executed -->
                    </span>
                    <span class="scraper-url">
                        <a href="${scraper.scraperUrl}" target="_blank" class="text-white">Visit Site</a> <!-- Link to the scraper's site -->
                    </span>
                </div>
            </div>
        `;
    }

    // Function to return the appropriate icon based on the statusId
    function getStatusIcon(statusId) {
        switch (statusId) {
            case 1: // Success
                return 'check-circle'; // Success icon
            case 2: // Failed
                return 'x-circle'; // Failure icon
            case 3: // Pending
                return 'exclamation-circle'; // Pending icon
            default:
                return 'question-circle'; // Default icon for unknown status
        }
    }

    // Function to return the appropriate color based on the statusId
    function getStatusColor(statusId) {
        switch (statusId) {
            case 1: // Success
                return 'green'; // Green for success
            case 2: // Failed
                return 'red'; // Red for failure
            case 3: // Pending
                return 'orange'; // Orange for pending
            default:
                return 'gray'; // Default color for unknown status
        }
    }

    // Load the scrapers dynamically on the initial page load
    loadScrapers(currentPage);
</script>
