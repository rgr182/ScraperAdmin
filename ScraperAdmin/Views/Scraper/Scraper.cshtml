@{
    ViewData["Title"] = "Scraper";
}

<!-- Incluir el archivo CSS -->
<link href="~/css/ScraperStyles.css" rel="stylesheet" />

<body class="scraper-body">
    <div class="scraper-container text-center">
        <h2 class="text-white">Scrappers</h2>

        <div class="scraper-row mt-4" id="scraperList">
            <!-- Scrapper 1 (Hardcoded) -->
            <div class="scraper-card shadow-sm">
                <div class="scraper-card-body p-3">
                    <img src="~/Media/git.png" alt="Git Image" class="img-fluid" />
                </div>
                <div class="scraper-card-footer">
                    <span class="text-white">EjemploSc1</span>
                    <span class="scraper-status-text text-white">
                        Estatus:
                        <i class="bi bi-check-circle" style="color: green;"></i>
                        15:09 9/25/2024
                    </span>
                </div>
            </div>

            <!-- Scrapper 2 (Hardcoded) -->
            <div class="scraper-card shadow-sm">
                <div class="scraper-card-body p-3">
                    <img src="~/Media/git.png" alt="Git Image" class="img-fluid" />
                </div>
                <div class="scraper-card-footer">
                    <span class="text-white">EjemploSc2</span>
                    <span class="scraper-status-text text-white">
                        Estatus:
                        <i class="bi bi-x-circle" style="color: red;"></i>
                        20:59 9/5/2024
                    </span>
                </div>
            </div>

            <!-- Scrapper 3 (Hardcoded) -->
            <div class="scraper-card shadow-sm">
                <div class="scraper-card-body p-3">
                    <img src="~/Media/git.png" alt="Git Image" class="img-fluid" />
                </div>
                <div class="scraper-card-footer">
                    <span class="text-white">EjemploSc3</span>
                    <span class="scraper-status-text text-white">
                        Estatus:
                        <i class="bi bi-exclamation-circle" style="color: orange;"></i>
                        8:19 9/25/2024
                    </span>
                </div>
            </div>
        </div>

        <div class="scraper-row mt-4" id="scraperListDynamic">
            <!-- Los scrappers dinámicos se cargarán aquí -->
        </div>

        <!-- Pagination Controls -->
        <nav aria-label="Page navigation example" class="scraper-pagination" id="paginationControls">
            <ul class="pagination">
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
</body>

<!-- Asegúrate de que estás incluyendo los íconos de Bootstrap desde el CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<script>
    const pageSize = 6; // Número máximo de scrappers por página
    let currentPage = 1;

    // Función para cargar scrappers dinámicos
    function loadScrapers(page) {
        fetch(`https://localhost:7297/api/ScraperTest?page=${page}&pageSize=${pageSize}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Datos recibidos:', data); // Verificar la respuesta
                const scraperListDynamic = document.getElementById('scraperListDynamic');
                scraperListDynamic.innerHTML = ''; // Limpiar la lista antes de agregar nuevos scrappers

                data.forEach(scraper => {
                    const card = `
                                <div class="scraper-card shadow-sm">
                                    <div class="scraper-card-body p-3">
                                        <img src="${scraper.imagePath}" alt="${scraper.scraperName} Image" class="img-fluid" />
                                    </div>
                                    <div class="scraper-card-footer">
                                        <span class="text-white">${scraper.scraperName}</span>
                                        <span class="scraper-status-text text-white">
                                            Estatus:
                                            <i class="bi bi-${getStatusIcon(scraper.scraperStatusId)}" style="color: ${getStatusColor(scraper.scraperStatusId)};"></i>
                                            ${scraper.lastExecutionDate ? new Date(scraper.lastExecutionDate).toLocaleString() : 'No ejecutado'}
                                        </span>
                                    </div>
                                </div>
                            `;
                    scraperListDynamic.innerHTML += card;
                });

                // Actualizar los controles de paginación
                updatePaginationControls(page, data.totalPages);
            })
            .catch(error => console.error('Error loading scrapers:', error));
    }

    function getStatusIcon(statusId) {
        switch (statusId) {
            case 1: // Correcto
                return 'check-circle';
            case 2: // Fallido
                return 'x-circle';
            case 3: // Pendiente
                return 'exclamation-circle';
            default:
                return 'question-circle'; // Icono por defecto
        }
    }

    function getStatusColor(statusId) {
        switch (statusId) {
            case 1: // Correcto
                return 'green';
            case 2: // Fallido
                return 'red';
            case 3: // Pendiente
                return 'orange';
            default:
                return 'gray'; // Color por defecto
        }
    }

    function updatePaginationControls(currentPage, totalPages) {
        const paginationControls = document.getElementById('paginationControls');
        const pageItems = paginationControls.querySelectorAll('.page-item');

        // Limpiar paginación existente
        pageItems.forEach(item => item.classList.remove('active', 'disabled'));

        // Activar la página actual
        pageItems[currentPage].classList.add('active');

        // Habilitar/Deshabilitar botones de paginación
        if (currentPage === 1) {
            pageItems[0].classList.add('disabled'); // Deshabilitar "Previous"
        }
        if (currentPage === totalPages) {
            pageItems[pageItems.length - 1].classList.add('disabled'); // Deshabilitar "Next"
        }
    }

    // Cargar scrappers dinámicamente inicialmente
    loadScrapers(currentPage);
</script>
