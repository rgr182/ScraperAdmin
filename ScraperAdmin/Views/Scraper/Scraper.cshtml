@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "Scraper";
    var baseUrl = Configuration["ApiSettings:BaseUrl"];
    var scraperEndpoint = Configuration["ApiSettings:ScraperEndpoint"];
}

<!-- Including the CSS file for styling the Scraper page -->
<link href="~/css/ScraperStyles.css" rel="stylesheet" />

<body class="scraper-body">
    <div class="scraper-container text-center">
        <h2 class="text-white">Scrapers</h2>
        <div class="scraper-row mt-4" id="scraperListDynamic"></div>
        <nav aria-label="Page navigation example" class="scraper-pagination" id="paginationControls">
            <ul class="pagination"></ul>
        </nav>
    </div>
</body>

<!-- Including Bootstrap Icons from the CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<script>
    const pageSize = 6; // Maximum number of scrapers per page
    let currentPage = 1; // Keeps track of the current page
    let totalPages = 1; // Will be updated with the total number of pages

    // Function to load dynamic scrapers
    function loadScrapers(page) {
        fetch(`https://scrapperadmin.duckdns.org/api/ScraperMetadata?page=${page}&pageSize=${pageSize}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`); // Handle errors in fetching data
                }
                return response.json(); // Parse the JSON response
            })
            .then(data => {
                console.log('Data received:', data); // Logs the received data for verification

                const scraperListDynamic = document.getElementById('scraperListDynamic');
                scraperListDynamic.innerHTML = ''; // Clear the container before adding new scrapers

                // Ensure only 'pageSize' number of scrapers are processed
                const displayedScrapers = data.slice((page - 1) * pageSize, page * pageSize); // Limit to pageSize items
                if (displayedScrapers.length === 0) {
                    scraperListDynamic.innerHTML = '<p class="text-white">No scrapers found.</p>';
                } else {
                    displayedScrapers.forEach(scraper => {
                        const card = generateScraperCard(scraper);
                        scraperListDynamic.innerHTML += card; // Append the generated card to the container
                    });
                }

                // Update pagination controls based on total scrapers
                totalPages = Math.ceil(data.length / pageSize); // Calculate total pages based on the length of data
                updatePaginationControls(totalPages); // Update pagination controls
            })
            .catch(error => {
                console.error('Error loading scrapers:', error);
                document.getElementById('scraperListDynamic').innerHTML = '<p class="text-white">Error loading scrapers.</p>';
            }); // Log any errors encountered
    }

    // Function to return the appropriate icon based on the statusId
    function getStatusIcon(statusId) {
        switch (statusId) {
            case 1: // Success
                return 'check-circle'; // Success icon
            case 2: // Failed
                return 'x-circle'; // Failure icon
            case 3: // Pending
                return 'exclamation-circle'; // Pending icon
            default:
                return 'question-circle'; // Default icon for unknown status
        }
    }

    // Function to return the appropriate color based on the statusId
    function getStatusColor(statusId) {
        switch (statusId) {
            case 1: // Success
                return 'green'; // Green for success
            case 2: // Failed
                return 'red'; // Red for failure
            case 3: // Pending
                return 'orange'; // Orange for pending
            default:
                return 'gray'; // Default color for unknown status
        }
    }

    // Function to generate each scraper's card
    function generateScraperCard(scraper) {
        const imagePath = '/Media/Git.png';
        return `
                <div class="scraper-card shadow-sm">
                    <div class="scraper-card-body p-3">
                        <img src="${imagePath}" alt="${scraper.scraperName} Image" class="img-fluid" />
                    </div>
                    <div class="scraper-card-footer">
                        <span class="text-white">${scraper.scraperName}</span>
                        <span class="scraper-status-text text-white">
                            Status:
                            <i class="bi bi-${getStatusIcon(scraper.scraperStatusId)}" style="color: ${getStatusColor(scraper.scraperStatusId)};"></i>
                            ${scraper.lastExecutionDate ? new Date(scraper.lastExecutionDate).toLocaleString() : 'Not executed'}
                        </span>
                        <span class="scraper-url">
                            <a href="${scraper.scraperUrl}" target="_blank" class="text-white">Visit Site</a>
                        </span>
                    </div>
                </div>
            `;
    }

    // Function to update pagination controls dynamically
    function updatePaginationControls(totalPages) {
        const paginationControls = document.getElementById('paginationControls');
        const paginationUl = paginationControls.querySelector('ul');
        paginationUl.innerHTML = ''; // Clear previous pagination controls

        // "Previous" button
        const prevClass = currentPage === 1 ? 'disabled' : '';
        paginationUl.innerHTML += `
                    <li class="page-item ${prevClass}">
                        <a class="page-link" href="#" aria-label="Previous" onclick="changePage(currentPage - 1)">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>`;

        // Generate page numbers dynamically
        for (let i = 1; i <= totalPages; i++) {
            const activeClass = currentPage === i ? 'active' : '';
            paginationUl.innerHTML += `
                        <li class="page-item ${activeClass}">
                            <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                        </li>`;
        }

        // "Next" button
        const nextClass = currentPage === totalPages ? 'disabled' : '';
        paginationUl.innerHTML += `
                    <li class="page-item ${nextClass}">
                        <a class="page-link" href="#" aria-label="Next" onclick="changePage(currentPage + 1)">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>`;
    }

    // Function to handle page changes
    function changePage(page) {
        if (page < 1 || page > totalPages) return; // Prevent invalid page numbers

        currentPage = page; // Update current page
        loadScrapers(currentPage); // Load scrapers for the new page
    }

    // Load the scrapers dynamically on the initial page load
    loadScrapers(currentPage);
</script>
